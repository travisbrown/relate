/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HelpDialog.java
 *
 * Created on Aug 9, 2010, 9:40:28 AM
 */
import java.awt.Rectangle;
import java.io.IOException;
import java.net.MalformedURLException;

import javax.swing.JEditorPane;
import javax.swing.UIManager;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.html.HTML;
import javax.swing.text.html.HTMLDocument;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 *
 * @author jonathanjekeli
 */
public class HelpDialog extends javax.swing.JDialog implements TreeSelectionListener{

    /** Creates new form HelpDialog */
    public HelpDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        helpTree.addTreeSelectionListener(this);
        
        java.net.URL helpURL = this.getClass().getResource(
                                "HelpFile.html");
        if (helpURL != null) {
            try {
                helpTextPane.setPage(helpURL);
            } catch (IOException e) {
                System.err.println("Attempted to read a bad URL: " + helpURL);
            }
        } else {
            System.err.println("Couldn't find file: HelpText.html");
        }

        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sidePanel = new javax.swing.JPanel();
        treeScroller = new javax.swing.JScrollPane();
        helpTree = new javax.swing.JTree();
        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        helpTextPane = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Visualization Tool Help");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Mouse Mode");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Picking");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Transforming");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Layouts");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Layout Options");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Magnitude");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Number of Connections");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Centrality Measures");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Which Nodes Are Shown?");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Family/NonFamily/All");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        helpTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        treeScroller.setViewportView(helpTree);

        org.jdesktop.layout.GroupLayout sidePanelLayout = new org.jdesktop.layout.GroupLayout(sidePanel);
        sidePanel.setLayout(sidePanelLayout);
        sidePanelLayout.setHorizontalGroup(
            sidePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(treeScroller, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        );
        sidePanelLayout.setVerticalGroup(
            sidePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(treeScroller, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
        );

        helpTextPane.setEditable(false);
        jScrollPane1.setViewportView(helpTextPane);

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(sidePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(sidePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                HelpDialog dialog = new HelpDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane helpTextPane;
    private javax.swing.JTree helpTree;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane treeScroller;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel sidePanel;
    // End of variables declaration//GEN-END:variables
	@Override
	public void valueChanged(TreeSelectionEvent e) {
		DefaultMutableTreeNode node = 
			(DefaultMutableTreeNode) helpTree.getLastSelectedPathComponent();

		if (node == null) return;

		String nodeInfo = (String) node.getUserObject();
		
		scrollToReference(nodeInfo);
		
	}
	
	public void scrollToReference(String reference) {
		Document d = helpTextPane.getDocument();
		if (d instanceof HTMLDocument) {
		    HTMLDocument doc = (HTMLDocument) d;
		    HTMLDocument.Iterator iter = doc.getIterator(HTML.Tag.A);
		    for (; iter.isValid(); iter.next()) {
			AttributeSet a = iter.getAttributes();
			String nm = (String) a.getAttribute(HTML.Attribute.NAME);
			if ((nm != null) && nm.equals(reference)) {
			    // found a matching reference in the document.
			    try {
				Rectangle r = helpTextPane.modelToView(iter.getStartOffset());
				if (r != null) {
				    // the view is visible, scroll it to the 
				    // center of the current visible area.
				    Rectangle vis = helpTextPane.getVisibleRect();
				    //r.y -= (vis.height / 2);
				    r.height = vis.height;
				    helpTextPane.scrollRectToVisible(r);
				}
			    } catch (BadLocationException ble) {
			        UIManager.getLookAndFeel().provideErrorFeedback(helpTextPane);
			    }
			}
		    }
		}
	    }

}
